{"version":3,"sources":["middleware/getRandomArticle.js","middleware/index.js","middleware/getQuestion.js","App.js","serviceWorker.js","index.js"],"names":["getRandomArticle","id","this","Error","articles","article","idx","keys","Object","randomIdx","length","Math","random","shortName","Codex","Codexes","OldCodexes","key","bind","getQuestion","result","vars","getArticle","len","filter","c","getRandomCodex","getVariant","isRight","articleNum","articleText","color","setColor","rightVariant","i","App","console","log","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.96b76af0.chunk.js","sourcesContent":["/* \r\nreturn random article from codex-object\r\nneed to bind to a codex interface\r\n  interface codex: {\r\n    id: Number,\r\n    header: String,\r\n    shortName: String,\r\n    articles: Object\r\n  }\r\n\r\n  params:\r\n  id: Number - if defined, return an article with this id\r\n\r\n  returned interface RandomArticle: {\r\n    article: String,\r\n    idx: String\r\n  }\r\n*/\r\n\r\n// construction with arrow function cannot be binding!!\r\nexport function getRandomArticle (id) {\r\n    if(!this) {\r\n        throw new Error(`function needs spetial this argument`)\r\n    }\r\n\r\n    if(id){\r\n        if(!this.articles[id]){\r\n            throw new Error(\"This id is not defined\")\r\n        }\r\n        return {\r\n            article: this.articles[id],\r\n            idx: id\r\n        }\r\n    }\r\n    \r\n    let keys = Object.keys(this.articles)\r\n    let len = keys.length\r\n    let randomIdx = keys[(len * Math.random()) | 0]\r\n\r\n    return {\r\n        article: this.articles[randomIdx], \r\n        idx: randomIdx + \" \" + this.shortName,\r\n        Codex: this.id\r\n    }\r\n}","import * as OldCodexes from \"../codexes\"\r\nimport { getRandomArticle } from \"./getRandomArticle\"\r\nimport { getQuestion } from \"./getQuestion\"\r\n\r\nlet Codexes = {...OldCodexes}\r\n\r\nfor(let key in Codexes){\r\n  Codexes[key].getRandomArticle = getRandomArticle.bind(Codexes[key])\r\n}\r\n\r\nCodexes.getQuestion = getQuestion.bind(Codexes)\r\n\r\nexport { Codexes }\r\n","/* \r\nreturn valid question from codexes-object\r\nneed to bind to a codex interface\r\n  interface codexes: {\r\n    codex1: Codex,\r\n    codex2: Codex...\r\n  }\r\n\r\n  params:\r\n  Codex: String - if defined, return a question only from this codex\r\n\r\n  returned interface Question: {\r\n    vars: Array of Variant,\r\n    \r\n  }\r\n\r\n  interface Variant: {\r\n      articleNum: Number,\r\n      articleText: String,\r\n      isRight: Bool,\r\n      color: String,\r\n      setColor: function\r\n  }\r\n*/\r\n\r\nexport function getQuestion(Codex) {\r\n    let result = {\r\n      vars: []\r\n    }\r\n\r\n    const getRandomCodex = () => {\r\n        let keys = Object.keys(this)\r\n        keys = keys.filter(c => typeof this[c] !== \"function\")\r\n        let len = keys.length\r\n        let randomIdx = (Math.random() * len) | 0\r\n\r\n        return keys[randomIdx]\r\n    }\r\n\r\n    const getArticle = (idx) => Codex \r\n        ? this[Codex].getRandomArticle(idx)\r\n        : this[getRandomCodex()].getRandomArticle(idx)\r\n\r\n    const getVariant = ({idx: articleNum, article: articleText}, isRight) => ({\r\n        articleNum,\r\n        articleText,\r\n        isRight,\r\n        color: 'default',\r\n        setColor: (color) => {this.color = color} \r\n    })\r\n\r\n    let rightVariant = (Math.random() * 4) | 0\r\n    result.vars[rightVariant] = getVariant(getArticle(), true)\r\n\r\n    for(let i = 0; i < 4; i++){\r\n      if(i == rightVariant) continue\r\n      result.vars[i] = getVariant(getArticle())\r\n    }\r\n\r\n    return result\r\n  }","import React from 'react';\n\nimport { Codexes } from './middleware' \n\nimport './App.css';\n\nfunction App() {\n\n\n  console.log(Codexes.getQuestion())\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Попробуй ответить на вопросы!</h2>  \n      </header>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}